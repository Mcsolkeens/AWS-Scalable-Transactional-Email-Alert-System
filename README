AWS Scalable -Transactional-EmailAlert System

# üí¨ AWS Transactional Email Alert System

This project demonstrates a **serverless architecture** that decouples email notification from a core banking application using **Amazon SQS, Lambda, and SES**.

---

## üöÄ Project Overview

A core banking system triggers transactional email alerts (e.g. deposits, withdrawals). Instead of directly using SMTP(or any email gatewa y) (which risks failure when local logs/storage overflow), we offload email processing using AWS-native services.

### üì¶ Tech Stack

* **Amazon SQS** ‚Äì Queue for email payloads
* **AWS Lambda** ‚Äì Processes messages from SQS and sends emails
* **Amazon SES** ‚Äì Sends high-deliverability transactional emails
* **CloudWatch** ‚Äì Logs and observability

---

##Architecture Flow

[Core App] ‚Üí [SQS] ‚Üí [Lambda] ‚Üí [SES] ‚Üí [Customer Email]

## üî® Setup Steps

### 1. **Create SQS Queue**

* Standard queue named `give it a situable name`
* No FIFO needed unless strict ordering is required

### 2. **Create Lambda Function**

* Triggered by the SQS queue
* Reads message, extracts recipient, subject, and body
* Uses Boto3 to send email via SES

### 3. **Configure SES**

> SES requires domain/email **verification** to prevent spam and spoofing.

* Use a **personal email** (e.g. Gmail, Yahoo) or a **registered domain**
* In **sandbox mode**, SES can only send to verified recipients
* For production access, submit a request to AWS

### 4. **Send Message via Core App**

A Python script (`core_app_sqs.py`)- (see repo for details of python script) sends a message like:

```
DETAILED STEP BY STEP IMPLEMENTATION

Great! Let's walk through this **step-by-step** like you're a learner building this project from scratch. We‚Äôll:

1. **Set up AWS resources**
2. **Write Python client code to send transactions**
3. **Write a Lambda function to process messages**
4. **Test the system end-to-end**

You'll learn how to:

* Set up **SQS**, **Lambda**, and **SES**
* Send messages to a queue
* Trigger a Lambda function
* Format a message
* Send emails with SES

---

## üéØ Project Goal

When a user makes a transaction (like a deposit or withdrawal), the app sends the details to **SQS**, a **Lambda** picks it up, formats a message, and sends an email using **SES**.

---

## üß∞ TOOLS USED

* AWS Services: **SQS**, **Lambda**, **SES**
* Language: **Python 3.8+**
* Environment: AWS Console + local machine
* Libraries: `boto3` (Python AWS SDK)

---

## üóÇÔ∏è STEP 1: PROJECT STRUCTURE

Create a folder structure:

```
transaction-notifier/
‚îÇ
‚îú‚îÄ‚îÄ send_transaction.py     # Client app (runs locally)
‚îú‚îÄ‚îÄ lambda_function.py      # Lambda handler (runs on AWS)
```

---

## üîë STEP 2: AWS SETUP (MANUAL VIA CONSOLE)

Let‚Äôs create all the necessary AWS resources.

---

### ‚úÖ A. Create an SQS Queue

1. Go to AWS Console > **SQS**
2. Click **‚ÄúCreate queue‚Äù**
3. Choose **Standard Queue**
4. Name it: `transaction-events-queue`
5. Keep defaults; click **Create Queue**

‚è±Ô∏è **Done in ~1 min**

---

### ‚úÖ B. Create and Verify an SES Email Address

1. Go to AWS Console > **SES**
2. Click **Verified Identities**
3. Click **‚ÄúCreate Identity‚Äù**
4. Choose **Email Address**, enter: `your-email@example.com`
5. Check your inbox and verify it by clicking the link

‚ö†Ô∏è If you're in the SES **sandbox**, you'll also need to verify the recipient email.

‚è±Ô∏è **Done in ~2‚Äì5 mins**

---

### ‚úÖ C. Create a Lambda Function

1. Go to AWS Console > **Lambda**

2. Click **‚ÄúCreate Function‚Äù**

3. Name it: `ProcessTransactionFunction`

4. Runtime: **Python 3.8** or higher

5. Click **Create Function**

6. In the Lambda function:

   * Under "Code", replace `lambda_function.py` with code from the next step (we'll get to that).
   * Click **Deploy**.

‚è±Ô∏è **Done in ~3‚Äì5 mins**

---

### ‚úÖ D. Add SQS Trigger to Lambda

1. In the Lambda dashboard ‚Üí go to **‚ÄúConfiguration‚Äù > Triggers**
2. Click **‚ÄúAdd Trigger‚Äù**
3. Choose **SQS**, select your queue
4. Click **Add**

This tells AWS to invoke the Lambda when a message is sent to SQS.

---

### ‚úÖ E. Add Permissions (IAM Role)

Lambda needs permissions to:

* Read SQS messages
* Send emails via SES

#### Do this:

1. Go to **IAM > Roles**
2. Find the role attached to your Lambda (usually starts with `lambda-`)
3. Attach the following inline policy:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "ses:SendEmail",
      "Resource": "*"
    }
  ]
}
```

‚úÖ Done ‚Äî Lambda can now poll SQS and send emails via SES.

---

## üßë‚Äçüíª STEP 3: LAMBDA FUNCTION CODE

Paste this code into your Lambda in the AWS Console.

### `lambda_function.py`

```python
import json
import boto3

ses = boto3.client('ses', region_name='us-east-1')  # Replace if needed

SENDER_EMAIL = "your-email@example.com"  # Must be SES-verified

def lambda_handler(event, context):
    for record in event['Records']:
        message = json.loads(record['body'])

        email = message['email']
        trans_type = message['type']
        amount = message['amount']

        subject = "Transaction Alert"
        body = format_email(trans_type, amount)

        try:
            send_email(email, subject, body)
            print(f"‚úÖ Email sent to {email}")
        except Exception as e:
            print(f"‚ùå Error sending email: {e}")

    return {'statusCode': 200}


def format_email(trans_type, amount):
    if trans_type == 'credit':
        action = "credited"
    elif trans_type == 'debit':
        action = "debited"
    else:
        action = "processed"

    return f"Your account has been {action} with ${amount:.2f}."


def send_email(to_email, subject, body):
    ses.send_email(
        Source=SENDER_EMAIL,
        Destination={'ToAddresses': [to_email]},
        Message={
            'Subject': {'Data': subject},
            'Body': {'Text': {'Data': body}}
        }
    )
```

üß† This function:

* Parses the SQS message
* Formats the email
* Sends it with SES

---

## üßë‚Äçüíª STEP 4: CLIENT SCRIPT TO SEND MESSAGE TO SQS

Install `boto3`:

```bash
pip install boto3
```

Then create this Python script:

### `send_transaction.py`

```python
import boto3
import json

sqs = boto3.client('sqs', region_name='us-east-1')  # Your region

QUEUE_URL = 'https://sqs.us-east-1.amazonaws.com/your-account-id/transaction-events-queue'

def send_transaction_event(user_email, transaction_type, amount):
    message = {
        "email": user_email,
        "type": transaction_type,  # 'credit' or 'debit'
        "amount": amount
    }

    response = sqs.send_message(
        QueueUrl=QUEUE_URL,
        MessageBody=json.dumps(message)
    )

    print("‚úÖ Message sent to SQS. Message ID:", response['MessageId'])

# Example usage
if __name__ == "__main__":
    send_transaction_event(
        user_email="customer@example.com",  # Can be same as your SES-verified email for now
        transaction_type="credit",
        amount=150.0
    )
```

---

## ‚ñ∂Ô∏è STEP 5: RUN & TEST

### ‚úÖ Run the client script

```bash
python send_transaction.py
```

You should see:

```
‚úÖ Message sent to SQS. Message ID: abc123...
```

### ‚úÖ Check Lambda Logs

Go to:

* AWS Console ‚Üí Lambda ‚Üí Monitor ‚Üí View Logs in CloudWatch
* You should see logs like:

```
‚úÖ Email sent to customer@example.com
```

### ‚úÖ Check Email

Check your inbox (use your SES-verified recipient email). The email should say:

```
Your account has been credited with $150.00.
```

üéâ **SUCCESS!**

---

## üß™ TRY MORE TESTS

Try other values:

* Change `"credit"` to `"debit"`
* Use different amounts
* Test invalid values (like missing fields) to see error handling in logs

---

## ‚úÖ OUTPUTS & DATA FLOW SUMMARY

### Input:

From `send_transaction.py`

```json
{
  "email": "customer@example.com",
  "type": "credit",
  "amount": 150.0
}
```

### Flow:

```
[Local Python Script] 
      ‚Üì
[SQS Queue] ‚Üê message sent
      ‚Üì
[AWS Lambda] ‚Üê auto-triggered
      ‚Üì
Formats message + sends email using SES
      ‚Üì
[Customer Email Inbox]
```

### Expected Output:

Email with:

```
Subject: Transaction Alert
Body: Your account has been credited with $150.00.
```

---

## üßπ OPTIONAL CLEAN-UP (TO AVOID CHARGES)

* Delete the Lambda function
* Delete the SQS queue
* Remove verified SES identity

---

Would you like me to help you automate this using **Terraform** or **AWS SAM**? Or add error handling, DLQ, or retry logic?


