<h1>AWS Scalable -Transactional-EmailAlert System</h1>

# üí¨ AWS Transactional Email Alert System

This project demonstrates a **serverless architecture** that decouples email notification from a core banking application using **Amazon SQS, Lambda, and SES**.

---

## üöÄ Project Overview

A core banking system triggers transactional email alerts (e.g. deposits, withdrawals). Instead of directly using SMTP(or any email gatewa y) (which risks failure when local logs/storage overflow), we offload email processing using AWS-native services.

### üì¶ Tech Stack

* **Amazon SQS** ‚Äì Queue for email payloads
* **AWS Lambda** ‚Äì Processes messages from SQS and sends emails
* **Amazon SES** ‚Äì Sends high-deliverability transactional emails
* **CloudWatch** ‚Äì Logs and observability

---

##Architecture Flow

[Core App] ‚Üí [SQS] ‚Üí [Lambda] ‚Üí [SES] ‚Üí [Customer Email]

## üî® Setup Steps

### 1. **Create SQS Queue**

* Standard queue named `give it a situable name`
* No FIFO needed unless strict ordering is required

### 2. **Create Lambda Function**

* Triggered by the SQS queue
* Reads message, extracts recipient, subject, and body
* Uses Boto3 to send email via SES

### 3. **Configure SES**

> SES requires domain/email **verification** to prevent spam and spoofing.

* Use a **personal email** (e.g. Gmail, Yahoo) or a **registered domain**
* In **sandbox mode**, SES can only send to verified recipients
* For production access, submit a request to AWS

### 4. **Send Message via Core App**

A Python script (`core_app_sqs.py`)- (see repo for details of python script) sends a message like:


### DETAILED STEP BY STEP IMPLEMENTATION

 We‚Äôll:

1. **Set up AWS resources**
2. **Write Python client code to send transactions**
3. **Write a Lambda function to process messages**
4. **Test the system end-to-end**

You'll learn how to:

* Set up **SQS**, **Lambda**, and **SES**
* Send messages to a queue
* Trigger a Lambda function
* Format a message
* Send emails with SES

---

## Project Goal

When a user makes a transaction (like a deposit or withdrawal), the app sends the details to **SQS**, a **Lambda** picks it up, formats a message, and sends an email using **SES**.

---

## TOOLS USED

* AWS Services: **SQS**, **Lambda**, **SES**
* Language: **Python 3.8+**
* Environment: AWS Console + local machine
* Libraries: `boto3` (Python AWS SDK)

---

## STEP 1: PROJECT STRUCTURE

Create a folder structure:

```
emailalert/
‚îÇ
‚îú‚îÄ‚îÄ core_app_sqs.py     # Client app (runs locally)
‚îú‚îÄ‚îÄ lambda_to_ses.py      # Lambda handler (runs on AWS)
```

---

## STEP 2: AWS SETUP (MANUAL VIA CONSOLE)

Let‚Äôs create all the necessary AWS resources.

###  A. Create an SQS Queue

1. Go to AWS Console > **SQS**
2. Click **‚ÄúCreate queue‚Äù**
3. Choose **Standard Queue**
4. Name it: `transaction-events-queue`
5. Keep defaults; click **Create Queue**
---

### B. Create and Verify an SES Email Address

1. Go to AWS Console > **SES**
2. Click **Verified Identities**
3. Click **‚ÄúCreate Identity‚Äù**
4. Choose **Email Address**, enter: `your-email@example.com`
5. Check your inbox and verify it by clicking the link---

### C. Create a Lambda Function

1. Go to AWS Console > **Lambda**

2. Click **‚ÄúCreate Function‚Äù**

3. Name it: `give appropriate name`

4. Runtime: **Python 3.8** or higher

5. Click **Create Function**

6. In the Lambda function:

   * Under "Code", replace `lambda_to_ses.py` with code from the next step (we'll get to that).
   * Click **Deploy**.

###  D. Add SQS Trigger to Lambda

1. In the Lambda dashboard ‚Üí go to **‚ÄúConfiguration‚Äù > Triggers**
2. Click **‚ÄúAdd Trigger‚Äù**
3. Choose **SQS**, select your queue
4. Click **Add**

This tells AWS to invoke the Lambda when a message is sent to SQS.

---

###  E. Add Permissions (IAM Role)

Lambda needs permissions to:

* Read SQS messages
* Send emails via SES

#### Do this:

1. Go to **IAM > Roles**
2. Find the role attached to your Lambda (usually starts with `lambda-`)
3. Attach the following inline policy:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "sqs:ReceiveMessage",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes"
      ],
      "Resource": "*"
    },
    {
      "Effect": "Allow",
      "Action": "ses:SendEmail",
      "Resource": "*"
    }
  ]
}
```

 Done ‚Äî Lambda can now poll SQS and send emails via SES.

## üßë‚Äçüíª STEP 3: LAMBDA FUNCTION CODE

Paste this code refer to "lamda_to_ses.py" in repo into your Lambda in the AWS Console.

 This function:

* Parses the SQS message
* Formats the email
* Sends it with SES

---

##  STEP 4: CLIENT SCRIPT TO SEND MESSAGE TO SQS

Run this code/script on VScode or any terminal "core_app_sqs.py" see files in repo 
This will send a json file with payload to the queue for lamda to consume
```

You should see:

```
Message sent to SQS. Message ID: abc123...
```
Email sent to customer@example.com
```

### Check Email

Check your inbox (use your SES-verified recipient email). The email should say:

```
Your account has been credited with $150.00.
```


```
Subject: Transaction Alert
Body: Your account has been credited with $150.00.
```

---




